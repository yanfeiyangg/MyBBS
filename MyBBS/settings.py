"""
Django settings for MyBBS project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
# djcelery 配置
import djcelery
djcelery.setup_loader()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'hv@8!=s16wz23)i@4b8!gol_l=#w2wv5d#ex9d76zdid5zx4r0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', ]

import configparser

# 读config.ini文件
conf = configparser.ConfigParser()
conf.read(os.path.join(BASE_DIR, 'config.ini'))
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app01.apps.App01Config',
    'djcelery'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MyBBS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MyBBS.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': conf.get("global", "ip"),
        'PORT': conf.get("mysql", "port"),
        'USER': conf.get("mysql", "username"),
        'PASSWORD': conf.get("mysql", "password"),
        'NAME': conf.get("mysql", "database"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    # app01
    os.path.join(BASE_DIR, "app01", "static"),
]

# session失效期计算方式为 无操作后的有效期时间计算
# SESSION_SAVE_EVERY_REQUEST = True

# 自定义auth表
AUTH_USER_MODEL = 'app01.UserInfo'

# 配置media
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, "app01", "media")

# 配置Redis
import redis

POOL = redis.ConnectionPool(host=conf.get("global", "ip"), port=conf.get("redis", "port"), decode_responses=True,
                            db=conf.get("redis", "database"))
REDIS = redis.Redis(connection_pool=POOL)

# 配置邮件
EMAIL_BACKEND = conf.get("email", "EMAIL_BACKEND")
EMAIL_HOST = conf.get("email", "EMAIL_HOST")
EMAIL_PORT = conf.get("email", "EMAIL_PORT")
EMAIL_HOST_USER = conf.get("email", "EMAIL_HOST_USER")  # 你的 QQ 账号
EMAIL_HOST_PASSWORD = conf.get("email", "EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True  # 用465端口就得开启
EMAIL_FROM = conf.get("email", "EMAIL_FROM")  # 你的 QQ 账号
DEFAULT_FROM_EMAIL = conf.get("email", "DEFAULT_FROM_EMAIL")  # 默认发件人

# 配置Celery
# 消息中间件（使用redis），消息代理，用于发布者传递消息给消费者
BROKER_URL = conf.get("celery","url")
# 消息结果返回中间件（使用redis），用于存储任务执行结果
CELERY_RESULT_BACKEND = conf.get("celery","url")
# 允许的内容类型，
CELERY_ACCEPT_CONTENT = ['json']
# 任务的序列化方式
CELERY_TASK_SERIALIZER = 'json'
# 任务结果的序列化方式
CELERY_RESULT_SERIALIZER = 'json'
# celery时区，定时任务使用
CELERY_TIMEZONE = 'Asia/Shanghai'